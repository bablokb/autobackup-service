#!/bin/bash
# ---------------------------------------------------------------------------
# This script is triggered by an udev-rule in
# /etc/udev/rules.d/99-autobackup.rules. It starts the backup-script rsnapshot.
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/autobackup-service
#
# ---------------------------------------------------------------------------

source /etc/autobackup.conf

# --- write message to system log   -----------------------------------------

msg() {
  [ "$SYSLOG" = "1" ] && logger -s -t "$SCRIPT" "$1"
}

# --- global settings   -----------------------------------------------------

setDefaults() {
 SCRIPT=$(basename "$0")
 : ${SYSLOG:=0}
 : ${WAIT_FOR_DEVICE:=1}
 : ${force_daily:=0}

 msg "info: LABEL           = $LABEL"
 msg "info: WAIT_FOR_DEVICE = $WAIT_FOR_DEVICE"
 msg "info: force_daily     = $force_daily"
 msg "info: yearly          = $yearly"
 msg "info: monthly         = $monthly"
 msg "info: weekly          = $weekly"
 msg "info: daily           = $daily"

 if [ -z "$LABEL" ]; then
   msg "error: LABEL not set in configuration file /etc/autobackup.conf"
   exit 3
 fi
}

# --- check device   --------------------------------------------------------

checkDevice() {
  # query udev argument
  udev_arg="$1"
  msg "info: checking: $1"

  # check for backup-partition ...
  DEVICE=$(blkid -l -o device -t LABEL=$LABEL)
  if [ -z "$DEVICE" ]; then
    msg "info: no partition with label $LABEL found"
    exit 0
  fi

  # ... and make sure it is on the newly plugged in block-device
  if [ "${DEVICE:5:3}" != "$udev_arg" ]; then
    msg "info: partition with label $LABEL is not on newly plugged device $udev_arg"
    exit 0
  fi
}

# --- prepare system   -----------------------------------------------------

prepareSystem() {
  # we mount the backup partion by label
  mkdir -p /tmp/autobackup
  if ! mount -L "$LABEL" /tmp/autobackup; then
    msg "error: could not mount backup-partition with label $LABEL"
    exit 3
  fi
  mount_dir=$(findmnt -n -l -o TARGET $DEVICE)
  msg "info: mount-directory: $mount_dir"
  mkdir -p "$mount_dir/.autobackup"
}

# --- cleanup   -------------------------------------------------------------

cleanup() {
  msg "info: syncing (this may take a while)"
  sync
  msg "info: umounting $DEVICE"
  grep -qw "$DEVICE" /etc/mtab && umount "$DEVICE"
  msg "info: finished"
}

# --- run backup   ---------------------------------------------------------

runBackup() {
  local now_year now_month now_week now_day
  local lb_year  lb_month  lb_week  lb_day

  # query current date
  read now_year now_month now_week now_day < <(date +"%Y %m %W %j")
  msg "info: current year:  $now_year"
  msg "info: current month: $now_month"
  msg "info: current week:  $now_week"
  msg "info: current day:   $now_day"

  # check if we need a run for interval 'year'
  if [ -n "$yearly" ]; then
    if [ ! -f "$mount_dir/.autobackup/.$yearly.last" ]; then
      lb_year=0
    else
      lb_year=$(date -d "$(stat -c'@%Y' \
                      $mount_dir/.autobackup/.$yearly.last 2>/dev/null)" +'%Y')
    fi
    if [ $lb_year -ne $now_year ]; then
      msg "info: starting backup for interval: $yearly (last backup: $lb_year)"
      rsnapshot $yearly
      touch "$mount_dir/.autobackup/.$yearly.last"
    else
      msg "info: yearly backup already done"
    fi
  fi

  # check if we need a run for interval 'month'
  if [ -n "$monthly" ]; then
    if [ ! -f "$mount_dir/.autobackup/.$monthly.last" ]; then
      lb_month=0
    else
      lb_month=$(date -d "$(stat -c'@%Y' \
                       $mount_dir/.autobackup/.$monthly.last 2>/dev/null)" +'%m')
    fi
    if [ $lb_month -ne $now_month ]; then
      msg "info: starting backup for interval: $monthly (last backup: $lb_month)"
      rsnapshot $monthly
      touch "$mount_dir/.autobackup/.$monthly.last"
    else
      msg "info: monthly backup already done"
    fi
  fi

  # check if we need a run for interval 'week'
  if [ -n "$weekly" ]; then
    if [ ! -f "$mount_dir/.autobackup/.$weekly.last" ]; then
      lb_week=0
    else
      lb_week=$(date -d "$(stat -c'@%Y' \
                      $mount_dir/.autobackup/.$weekly.last 2>/dev/null)" +'%W')
    fi
    if [ $lb_week -ne $now_week ]; then
      msg "info: starting backup for interval: $weekly (last backup: $lb_week)"
      rsnapshot $weekly
      touch "$mount_dir/.autobackup/.$weekly.last"
    else
      msg "info: weekly backup already done"
    fi
  fi

  # check if we need (another) run for interval 'day'
  if [ -n "$daily" ]; then
    if [ ! -f "$mount_dir/.autobackup/.$daily.last" ]; then
      lb_day=0
    else
      lb_day=$(date -d "$(stat -c'@%Y' \
                     $mount_dir/.autobackup/.$daily.last 2>/dev/null)" +'%j')
    fi
    if [ $lb_day -ne $now_day -o $force_daily -eq 1 ]; then
      msg "info: starting backup for interval: $daily (last backup: $lb_day)"
      rsnapshot $daily
      touch "$mount_dir/.autobackup/.$daily.last"
    else
      msg "info: daily backup already done"
    fi
  fi
}

# --- main program   ---------------------------------------------------------

setDefaults
sleep "$WAIT_FOR_DEVICE"
checkDevice "$1"
prepareSystem
runBackup
cleanup
